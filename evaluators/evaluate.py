"""number of functions to be used to evaluate the trained generator of a gan network.

.. notes:: All output of each function in this module is saved to the evaluation folder.
"""
import os
import matplotlib.pyplot as plt
from tensorflow import random
import pandas as pd
import numpy as np

os.chdir('C:\\Users\\jmw\\Workspace\\th-e-gan\\evaluation')


# ToDo: All plots should plot the unscaled features.
def plot_features(data: pd.Series, y_label: str, **kwargs):
    """plots one dimensional time series data for a given day.

    :param data: one dimensional time series data
    :type data:  pd.Series

    :param y_label: label of data amplitude
    :type y_label:  string

    :param path: optional argument contained in kwargs
    :type path: string

    .. notes:: the day will act as the title of the plot as well as its
    name.
    """

    if not isinstance(data, pd.Series) and data.index.inferred_type == 'datetime64':
        raise ValueError("data.index must be comprised of time_stamps")

    day = data.index[0].strftime('%d.%m')

    if 'path' in kwargs:

        data_dir = kwargs['path']
        if not os.path.isdir(data_dir):
            os.makedirs(data_dir)

        file = os.path.join(data_dir, day + '.png')

    else:
        file = day + '.png'

    plt.title(data.name)
    plt.plot(data.index.hour, data)
    plt.ylabel(y_label)

    plt.savefig(file)
    plt.close()


def sample(generator, dim, targets):
    """sample the generators probability distribution over the feature space.

    :param generator: generator network of a gan network
    :type keras.Model, keras.Sequential

    :param dim: batch level dimension of the noise vector
    :type dim: Tuple

    :param targets: features to be generated by the generator
    :type targets: list

    :return sample_batch: batch of generated target features
    :rtype pd.DataFrame
    """

    if not len(dim) != 3:
        raise ValueError('The variable dim must contain the following information: (Batch_Size, # Steps, # Features)')

    noise = random.normal([dim[0], dim[1], dim[2]])
    sample_batch = generator(noise, training=False)

    sample_batch = pd.DataFrame(sample_batch, columns=targets)

    return sample_batch


if __name__ == '__main__':

    print('Beginning test of general evaluate function')
    os.mkdir('test_dir')

    print('Generating gauss distribution')
    sample_day = pd.Series(np.random.normal(size=(24,)),
                           index=pd.date_range(start='4/14/2022', periods=24, freq='H'),
                           name='pv_power')

    print('testing plot_features')
    path = {'path': 'test_dir'}
    plot_features(sample_day, 'power', **path)
